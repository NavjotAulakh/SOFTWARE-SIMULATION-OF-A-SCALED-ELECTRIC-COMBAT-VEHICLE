1 Introduction

The designated electric combat vehicle it includes the standards from a casual vehicle which is an manual driving system with no interaction from a machine to overdrive or assist the main functionalities from the driver/pilot.
Also a lotof pilots of these kind of vehicles, may not be able to assume the differences of obstacles nearby or in range of the vehicle on ground.

2 Product Vision and Scope

Project vision statement is to create a new recognition system where the vehicle will detect and differentiate between obstacles.
 The main scope of the project is to design and implement an algorithm that will classify and detect obstacles and aggregate these features in the actual prototype which has already the normal manual driving system.
The requirements for the algorithm to be applied are:
- Have a quick reaction in a minimum timeframe possible.
- Have created simulated environment with the ROS (Robot Operation System), test it and validate the algorithm, and then test it physically with the prototype on the real world.

For the background and research required to the implementation and build of the environment it’s important to take count with the set of packages available of ROS, such as GAZEBO which will have the all the interfaces
require for the simulation of the environment and then so apply the obstacle algorithms to the navigation system in the respective environment. For the development of the environment and the simulation of the algorithm
all the group members would require to learn and to get involved with multiple navigation and manipulation packages suck as simulation.


3. Design Process (3%) - nav
This capstone project requires a robust solution for the image processing algorithm that will be responsible for object detection and classification,
which must be accompanied by a thorough testing phase in a simulated environment (using ROS) and implemented according to all of the requirement
specifications. This aspect of the project requires the design process to be initiated only after the requirements are coherently defined and analyzed
before any of the design or development phases, thus the most relative and efficient design model that addresses these concerns while allowing the
flexibility of revisiting the preceding stage is the Royce’s modified Waterfall Model with the feedback loop.
The unmodified Waterfall model is considered the oldest of the structured SDLC methodologies where the software is development in stages such as
Requirements  System Design  Implementation  Integration and Testing  Deployment of System  Maintenance. These six stages are developed in
a linear sequential flow, hence the model is also referred to as Linear-Sequential Life Cycle Model, but the concern with this model is the
unrecognition of unforeseen design problems after a concerned stage has reached completion. The modified Waterfall model with Royce’s iterative
feedback allows for the stages to overlap in addition to the preceding stage to be revisited as shown by Figure 3.1 below. The iterative
feedback also allows for the testing stage to iterate to the design stage bypassing the intermediate stages.


4. Scenarios and/or Use Cases (5%) - nav
The project and the corresponding design of the image processing algorithm can be applied in wide variety of applications and
technologies. The target group for this project are electric vehicles that require information about its environment, for obstacle
clearance pathing, targeting, classification, and specifically cameras that can be mounted to any device or technologies utilizing
one or more features of this algorithm.

5. Stakeholder Requirements and Traceability Matrix (10%) - Jeffrey

| Req ID#	| Req Type	| Requirement Source	| Requirement Specification |
| ------------- | ------------- | ------------- | ------------- |
| RQ1 | Client | This project requires students to design and develop an image processing algorithm..	| The development of an object detection algorithm (ODA) is integral to the project. |
| RQ2	| Client | …that can detect and classify objects and obstacles for the 8x8 Electric Combat Vehicle. | ODA must be able to identify and categorize individual objects in a real environment. |
| RQ3	| Client | Such techniques may include, but is not limited to, convolutional neural networks and other deep learning options. | ODA must be capable of identifying a large variety of objects, both large and small scale. |
| RQ4 | Client | …The algorithm must be compatible with ROS (Robot Operating System) | ODA must support an interface that the ROS architecture can utilize. |
| RQ5 | Client | The algorithm should be efficient and robust and must exhibit high repeatability.” | ODA must perform its tasks in an acceptable amount of time, and must operate in a stable state machine framework. Since ROS does not operate in real time, neither can ODA. |
| RQ6 | Client | Sourcing of compatible sensors and controller hardware for compact packaging and deployment. | ODA must utilize sensors and controllers that is compatible with ROS. |
| RQ7 | Client | Write C++/Python code for Obstacle Detection and Classification | ODA must be developed to be compatible with ROS, so it must be written in either Python or C++ as the programming language. |
| RQ8 | Client | Conduct testing and validation in both simulated and physical environment. | ODA must support both simulated and physical implementation of the algorithm. The ODA must support testing and debugging in both simulated and physical environments. |
Table 1-5A – Requirements Specification

| Test Case ID#	| Quality Attribute | Test Case Description |
| ------------- | ------------- | ------------- |
| TC1 | Compatibility | ODA is accessible by any ROS localization algorithm through a generic interface to generate robot localization. |
| TC2 | Functional Suitability | ODA will properly identify all distinct objects in the environment. |
| TC3 | Functional Suitability | ODA will properly categorize objects into Impassable, Passable, and Distant. |
| TC4 | Functional Suitability | ODA should be able to operate with its full feature set in Gazebo, a simulation software environment. |
| TC5 | Functional Suitability | ODA should be able to operate with its full feature set when implemented on a ROS compatible hardware device. |
| TC6 | Performance Efficiency | ODA will complete a designated course in relatively the same amount of time as a comparable laser-based implementation of an object detection algorithm. |
| TC7 | Usability | ODA should not require any extra user interaction besides installation. |
| TC8 | Reliability | ODA should operate in a stable state machine and continue running indefinitely. |
| TC9 | Reliability | ODA should be able to detect and recover from object detection related faults, and sensor disability faults. |
| TC10 | Security | ODA should not be an accessible security attack surface. |
| TC11 | Maintainability | ODA should be a modular algorithm that can be easily transplanted into new robotic devices that support ROS |
| TC12 | Portability | ODA installation should not require much more time to install then ROS alone. It should be an includable library. |
Table 1-5B – Test Case Description

| Test Cases \ Requirements | RQ1 | RQ2 | RQ3 | RQ4 | RQ5 | RQ6 | RQ7 | RQ8 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| TC1  |   |   |   | X |   |   | X | X |
| TC2  | X | X | X |   |   |   |   |   |
| TC3  | X | X | X |   |   |   |   |   |
| TC4  | X |   | X | X |   |   | X | X |
| TC5  | X | X | X |   |   | X |   | X |
| TC6  |   |   |   |   | X |   |   |   |
| TC7  | X |   |   | X |   |   |   |   |
| TC8  |   |   |   |   | X |   |   |   |
| TC9  |   |   |   |   |   |   | X | X |
| TC10 |   |   |   |   | X |   |   |   |
| TC11 |   |   |   |   |   | X |   | X |
| TC12 |   |   |   |   |   | X |   | X |
Table 1-5C - Requirements Tractability Table

6. Definition of Acceptance Tests (3%) - Soso
Acceptance testing involves testing a system for  acceptability, The system must be in line with the requirements.
All requirements proposed for the project/system must be met. If requirements are not met, project might be considered faulty.
The initial requirements for the obstacle detection and classification algorithm  for 8x8 electronic combat vehicle would be
-Develop a working image processing algorithm
-Algorithm developed must be able to be applied to our physical 8x8 vehicle
-Algorithm developed must be compatible with ROS(Robot operating system)
-Testings must be conducted and validated in both simulated and physical environments
-A complete package of obstacle/object detection and classification should be delivered at due date
-The algorithm should be efficient and must exhibit high repeatability


7. Project Plan (3%)- Soso
Our project plan is designed to guide and control the execution of the project, this involves
 -Research and familiarization with ROS and Linux development environment
-Research and familiarization with obstacle detection
-Writing c++/python code for obstacle detection
-Test c++/python code which was written
- Make sure algorithm is compatible with ROS
-finally , a fully designed and developed image processing algorithm which can detect  and classify objects for the 8x8 electronic
combat vehicle .


8. Contribution matrix

| Person\Section	| Section 1 | Section 2	| Section 3 | Section 4 | Section 5 | Section 6 | Section 7 | Section 8 |
| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |  ------------- |
| Nicolas Zarfino | X | X |   |   |   |   |   |   |
| Navjot Aulakh |   |   | X | X |   |   |   |   |
| Jeffrey Zhang |   |   |   |   | X |   |   | X |
| Musadiq Soso |   |   |   |   |   | X | X |   |
