1 Introduction

This report is an outline for creating an obstacle detection algorithm for a specially designed electric combat vehicle. 
The vehicle in question is an 8x8 remote-controlled vehicle equipped with various sensors such as an
odometer and camera. To assist with driving and potential autonomous activity, a sophisticated obstacle detection, 
and identification algorithm will be developed according to the needs of the invested parties and the vehicle itself.

2 Product Vision and Scope

Project vision statement is to create a new recognition system where the vehicle will detect and differentiate between obstacles.
 The main scope of the project is to design and implement an algorithm that will classify and detect obstacles and aggregate these features in the actual prototype which has already the normal manual driving system.
The requirements for the algorithm to be applied are:
- Have a quick reaction in a minimum timeframe possible.
- Have created simulated environment with the ROS (Robot Operation System), test it and validate the algorithm, and then test it physically with the prototype on the real world.

For the background and research required to the implementation and build of the environment it’s important to take count with the set of packages available of ROS, such as GAZEBO which will have the all the interfaces
require for the simulation of the environment and then so apply the obstacle algorithms to the navigation system in the respective environment. For the development of the environment and the simulation of the algorithm
all the group members would require to learn and to get involved with multiple navigation and manipulation packages suck as simulation.

Stakeholders

Management—the managing team that install and are in charge of the electric combat vehicles existing in the military in different countries.
Developers—All the team members that are involved in the project, which are the software engineers and the mechanical engineers that were assigned.  After the development of this obstacle algorithm will be applied with
the designed electric combat vehicle by the mechanical team.
Maintenance—A set of team that which will be designated to help the installation and maintainability of the systems applied in the combat vehicles costumers and managers of the vehicle.
Purchasers—Military based vehicles production companies that operates ground electric vehicles in their line of work.
Users— designated drivers in the military positon that will operate tanks or the different electric combat vehicles that will be applied the software.

Assumptions and constraints

Assumptions: the developers may take the following for the functionality of the design:
-The Algorithm will be applied in the electric combat vehicle designed by the mechanical team.
Constraints: The designed algorithm will conform to the following restrictions:
-The system will be applied only focus in the electric based vehicles with special cameras for obstacles recognition.
-The Algorithm must be compatible to the ROS system for the simulation to work.
-The simulation must be working before being applied in the actual prototype of the vehicle.

3. Design Process (3%) - nav

This capstone project requires a robust solution for the image processing algorithm that will be responsible for object detection and classification,
which must be accompanied by a thorough testing phase in a simulated environment (using ROS) and implemented according to all of the requirement
specifications. This aspect of the project requires the design process to be initiated only after the requirements are coherently defined and analyzed
before any of the design or development phases, thus the most relative and efficient design model that addresses these concerns while allowing the
flexibility of revisiting the preceding stage is the Royce’s modified Waterfall Model with the feedback loop.

The unmodified Waterfall model is considered the oldest of the structured SDLC methodologies where the software is development in stages such as
Requirements  System Design  Implementation  Integration and Testing  Deployment of System  Maintenance. These six stages are developed in
a linear sequential flow, hence the model is also referred to as Linear-Sequential Life Cycle Model, but the concern with this model is the
unrecognition of unforeseen design problems after a concerned stage has reached completion. The modified Waterfall model with Royce’s iterative
feedback allows for the stages to overlap in addition to the preceding stage to be revisited as shown by Figure 3.1 below. The iterative
feedback also allows for the testing stage to iterate to the design stage bypassing the intermediate stages.

The image processing algorithm’s design process will begin with the evaluation of the problem address in the Capstone project description,
background research and analysis will begin by the team members. A complete set of requirements and specifications will be defined in accordance
with the shareholders, these requirements will be analyzed and the system architecture, hardware, and software will be specified accordingly for
the design phase where architecture and detailed design will commence and test cases will be generated. Next, the development phase will begin in
Linux 16.04 (ROS Kinetic) utilizing Gazebo to accommodate available and required packages for designing the image processing algorithm intended for
object detection and classification. Once development has finished, it will be verified and validation in the Validation phase by utilizing
acceptance tests for all of the listed scenarios and use cases. Finally, the algorithm will be deployed onto the simulated environment for thorough
validation as the Iterative feedback model’s quality assurance splits each stage in two parts, one for work toward the stages purpose and the other
for validation and verification.

For this algorithm, it’s crucial that the requirements are first thoroughly researched, and documented. Following which, the implementation of
certain features is executed, followed by testing of each of these feature individually and integrated combination of multiple modules. Once the
algorithm is thoroughly tested and integrated, the next phase to be carried out would be deployment onto a simulated environment in this term and
then working towards completing acceptance testing in real world next term.

4. Scenarios and/or Use Cases (5%) - nav

The project and the corresponding design of the image processing algorithm can be applied in wide variety of applications and technologies. The
target group for this project are electric vehicles that require information about its environment, for obstacle clearance pathing, targeting,
classification, and specifically cameras that can be mounted to any device or technologies utilizing one or more features of this algorithm to
aid in the functionality of the prime device.

Use Case 1.1

Use Case Name: Ground Level - Obstacle Detection
Actors: Electrical Combat Vehicle’s Camera, ROS, Environment
Overview: The ground level obstacle detection takes place by the utilization of the image processing algorithm on the ROS by taking sensory
information of the Combat Vehicle Camera about the Environment to detect near-by objects.
Preconditions: Combat Vehicle’s Camera Initiated with ROS Operational, Ground Level Environment View Analysis Positive
Post condition: ROS nodes for mapping environment generated, Camera reinitialized, Obstacle Identification initiated
Use case Description: Vehicle’s Camera takes in visual representation of the environment and ROS processes the information to pinpoint the
location of the objects in the surrounding environment that block or deviate the selected/routed path for the vehicle.
Use Case Associations: Obstacle Identification, Obstacle Classification/ Categorization
Basic Flow: Environment’s Image taken  Image segmented  Image processed by algorithm in ROS (C++)  Obstacle/Object Detected that blocks
or deviates the current route of the vehicle  Generates and stores an updated map of the surrounding environment (with or without an obstacle located)
 Object identification initiated
Alternate Flow; Obstacle beyond current route
Exception Flow: Image corruption when segmented or camera covered
Traceability: RQ1, RQ5, RQ8

Use Case 1.2
Use Case Name: Obstacle Identification
Actors: Pre-stored Image and Environment Information, ROS
Overview: The obstacle identification is initiated when an obstacle is detected by the image processing algorithm on ROS.
Preconditions: Obstacle Detected, On-board Map Initiated, ROS Operational
Post condition: Obstacle Identified by Name, Size (Visible Dimensions), Location (X, Y, Z), and Distance stored on-board the Electric Combat Vehicle. Obstacle Classification initiated if not in categories.
Use case Description: Obstacle Identification utilized the obstacle detection to locate an obstacle then utilizes the existing information to calculate dimensions, location, size, and structure for naming and storing on ROS.
Use Case Associations: Obstacle Identification, Obstacle Classification/ Categorization
Basic Flow: Obstacle Detected  Image processed information analyzed  Obstacle generated with new information  Obstacle repository updated  Obstacle Categorization / Classification initiated
Alternate Flow; Obstacle pre-identified
Exception Flow: Obstacle can’t be identified or out of bounds
Traceability: RQ2, RQ3, RQ5, RQ8

Use Case 1.3
Use Case Name: Obstacle Categorization / Classification
Actors: Obstacle Identification, ROS
Overview: The obstacle categorization is initiated when an obstacle is identified and stored by the image processing algorithm on ROS.
Preconditions: Obstacle Identified, ROS Operational
Post condition: Obstacle classified identified object into categories such as Passable, Impassable, or Distant.
Use case Description: Obstacle Categorization / Classification utilizes obstacle identification to distinguish between an passable, impassable, or distant obstacle to update the current state of vehicle to avoid by rerouting existing path.
Use Case Associations: Obstacle Identification, Obstacle Classification/ Categorization
Basic Flow: Obstacle Identified  Object information analyzed  Obstacle classification generated and categorized  Obstacle Classification repository updated  Obstacle Avoidance initiated
Alternate Flow; Obstacle pre-categorized
Exception Flow: Obstacle can’t be categorized or out of bounds
Traceability: RQ2, RQ5, RQ8


5. Stakeholder Requirements and Traceability Matrix (10%) - Jeffrey

| Req ID#	| Req Type	| Requirement Source	| Requirement Specification |
| ------------- | ------------- | ------------- | ------------- |
| RQ1 | Client | This project requires students to design and develop an image processing algorithm..	| The development of an object detection algorithm (ODA) is integral to the project. |
| RQ2	| Client | …that can detect and classify objects and obstacles for the 8x8 Electric Combat Vehicle. | ODA must be able to identify and categorize individual objects in a real environment. |
| RQ3	| Client | Such techniques may include, but is not limited to, convolutional neural networks and other deep learning options. | ODA must be capable of identifying a large variety of objects, both large and small scale. |
| RQ4 | Client | …The algorithm must be compatible with ROS (Robot Operating System) | ODA must support an interface that the ROS architecture can utilize. |
| RQ5 | Client | The algorithm should be efficient and robust and must exhibit high repeatability.” | ODA must perform its tasks in an acceptable amount of time, and must operate in a stable state machine framework. Since ROS does not operate in real time, neither can ODA. |
| RQ6 | Client | Sourcing of compatible sensors and controller hardware for compact packaging and deployment. | ODA must utilize sensors and controllers that is compatible with ROS. |
| RQ7 | Client | Write C++/Python code for Obstacle Detection and Classification | ODA must be developed to be compatible with ROS, so it must be written in either Python or C++ as the programming language. |
| RQ8 | Client | Conduct testing and validation in both simulated and physical environment. | ODA must support both simulated and physical implementation of the algorithm. The ODA must support testing and debugging in both simulated and physical environments. |
Table 1-5A – Requirements Specification

| Test Case ID#	| Quality Attribute | Test Case Description |
| ------------- | ------------- | ------------- |
| TC1 | Compatibility | ODA is accessible by any ROS localization algorithm through a generic interface to generate robot localization. |
| TC2 | Functional Suitability | ODA will properly identify all distinct objects in the environment. |
| TC3 | Functional Suitability | ODA will properly categorize objects into Impassable, Passable, and Distant. |
| TC4 | Functional Suitability | ODA should be able to operate with its full feature set in Gazebo, a simulation software environment. |
| TC5 | Functional Suitability | ODA should be able to operate with its full feature set when implemented on a ROS compatible hardware device. |
| TC6 | Performance Efficiency | ODA will complete a designated course in relatively the same amount of time as a comparable laser-based implementation of an object detection algorithm. |
| TC7 | Usability | ODA should not require any extra user interaction besides installation. |
| TC8 | Reliability | ODA should operate in a stable state machine and continue running indefinitely. |
| TC9 | Reliability | ODA should be able to detect and recover from object detection related faults, and sensor disability faults. |
| TC10 | Security | ODA should not be an accessible security attack surface. |
| TC11 | Maintainability | ODA should be a modular algorithm that can be easily transplanted into new robotic devices that support ROS |
| TC12 | Portability | ODA installation should not require much more time to install then ROS alone. It should be an includable library. |
Table 1-5B – Test Case Description

| Test Cases \ Requirements | RQ1 | RQ2 | RQ3 | RQ4 | RQ5 | RQ6 | RQ7 | RQ8 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| TC1  |   |   |   | X |   |   | X | X |
| TC2  | X | X | X |   |   |   |   |   |
| TC3  | X | X | X |   |   |   |   |   |
| TC4  | X |   | X | X |   |   | X | X |
| TC5  | X | X | X |   |   | X |   | X |
| TC6  |   |   |   |   | X |   |   |   |
| TC7  | X |   |   | X |   |   |   |   |
| TC8  |   |   |   |   | X |   |   |   |
| TC9  |   |   |   |   |   |   | X | X |
| TC10 |   |   |   |   | X |   |   |   |
| TC11 |   |   |   |   |   | X |   | X |
| TC12 |   |   |   |   |   | X |   | X |
Table 1-5C - Requirements Tractability Table

6. Definition of Acceptance Tests (3%) - Soso

Acceptance testing involves testing a system for acceptability, The system must be in line with the requirements. All requirements proposed for the project/system must be met.
If requirements are not met, project might be considered faulty. The initial requirements for the obstacle detection and classification algorithm for 8x8 electronic combat vehicle would be

Develop a working image processing algorithm
•	The group members would have to work together and come up with an image processing algorithm

Algorithm developed must be able to be applied to our physical 8x8 vehicle
• The Algorithm developed by the team should be able to be applied to the physical 8x8 combat vehicle

Algorithm developed must be compatible with ROS (Robot operating system)
•	Group members will have to ensure the algorithm developed must be compatible with ROS(Robot operating system)

Testing’s must be conducted and validated in both simulated and physical environments
•	All code written must be tested and validated in both the physical and simulated environments

A complete package of obstacle/object detection and classification should be delivered at due date
•	The team members will also have to ensure all requirements and a complete package is met at the due date

The algorithm should be efficient and must exhibit high repeatability
•	The algorithm developed by group members should be efficient and must exhibit high repeatability




7. Project Plan (3%)- Soso
  Our project Plan is designed to guide and control the execution of the project, the project plan is the key to a successful project and is the most important document that needs to be created when starting any project.
  Project initiation requires detailed and vital documentation to track project requirements, project timeline, functionalities and scheduling.

The  project plan would help us achieve the following
•	To document and communicate stake holder products and project expectations
•	To Control the team’s schedule and delivery
•	To calculate and manage associated risks

Project Effort Estimate
The project effort estimate was calculated using COCOMO effort formula, The obstacle detection project at hand would be seen as an Organic project. The basic COCOMO effort applied formula is as follows below:
Effort Applied (E) = a1(KLOC)^a2*PM
Where a1 and a2 are constants For Organic projects
KLOC = line of code (thousand)
PM = the total man-months

Calculation
Effort = a1 *(KLOC)^a2*PM
   a1 = 2.4, a2 = 1.05, KLOC = 4, PM = total months = 3.
= 2.4(4)^1.05*3 = 30.86
Effort = 30.86 man months


Critical Path Method and graph is shown below

Activity	Predecessor	Duration(weeks)
A	            -	           1
B	            A	           1
C	            A	           4
D	            B	           3
E	            C	           2
F	           D,E	          1

Activity Parameters
A - Research and Familiarize with ROS
B – Research and familiarization with obstacle detection
C – Write C++/Python code for Obstacle Detection
D – Test Code that was written
E – Confirm Algorithm is compatible with ROS
F – Presentation


           1	 B	 2    2  D  5
           3	 1	 4    4  3  7

 0 	A	 1                        7  F  8
 0	 1	 1                        7  1  8

           1  C  5    5	 E	 7
           1  4  5    5	 2	 7

         CRITICAL  PATH







8. Contribution matrix

| Person\Section	| Section 1 | Section 2	| Section 3 | Section 4 | Section 5 | Section 6 | Section 7 | Section 8 |
| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |  ------------- |
| Nicolas Zarfino | X | X |   |   |   |   |   |   |
| Navjot Aulakh |   |   | X | X |   |   |   |   |
| Jeffrey Zhang |   |   |   |   | X |   |   | X |
| Musadiq Soso |   |   |   |   |   | X | X |   |
